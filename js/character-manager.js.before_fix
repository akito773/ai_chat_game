class CharacterManager {
    constructor() {
        this.characters = {};
        this.currentCharacter = null;
        this.loadCharacters();
    }

    // キャラクターデータを読み込み
    async loadCharacters() {
        try {
            const response = await fetch('characters/characters.json');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            this.characters = await response.json();
            console.log('キャラクターデータ読み込み完了:', this.characters);
            
            // デフォルトキャラクターを設定
            const defaultCharacterId = Object.keys(this.characters)[0];
            if (defaultCharacterId) {
                this.selectCharacter(defaultCharacterId);
            }
        } catch (error) {
            console.error('キャラクターデータの読み込みに失敗:', error);
            // フォールバック用のデフォルトキャラクター
            this.characters = {
                sakura: {
                    id: 'sakura',
                    name: 'さくらちゃん',
                    emoji: '👧',
                    description: '元気いっぱいの学園アイドル♪',
                    personality: 'とても明るく元気で、いつも笑顔。友達思いで、みんなを励ますのが得意。',
                    greeting: 'こんにちは〜！私、さくらです♪\n今日はどんなお話しましょうか？何でも聞いてくださいね〜✨',
                    color: '#ff6b9d',
                    image: 'assets/images/sakura.png'
                }
            };
            this.selectCharacter('sakura');
        }
    }

    // キャラクターを選択
    selectCharacter(characterId) {
        if (this.characters[characterId]) {
            this.currentCharacter = this.characters[characterId];
            this.updateUI();
            console.log('キャラクター選択:', this.currentCharacter);
        }
    }

    // UIを更新
    updateUI() {
        if (!this.currentCharacter) return;

        // キャラクター情報表示
        const characterDisplay = document.getElementById('character-display');
        if (characterDisplay) {
            characterDisplay.innerHTML = `
                <div class="character-image">
                    <img src="${this.currentCharacter.image}" alt="${this.currentCharacter.name}"
                         onerror="this.style.display='none'; this.parentElement.innerHTML='<div style=\\"font-size: 60px; color: ${this.currentCharacter.color};\\">${this.currentCharacter.emoji}</div>';">
                </div>
                <h2>${this.currentCharacter.name}</h2>
                <p class="character-description">${this.currentCharacter.description}</p>
            `;
        }

        // テーマカラー変更
        document.documentElement.style.setProperty('--character-color', this.currentCharacter.color);

        // 挨拶メッセージ表示
        if (this.currentCharacter.greeting) {
            this.displayGreeting();
        }
    }

    // 挨拶メッセージを表示
    displayGreeting() {
        const messagesDiv = document.getElementById('messages');
        if (messagesDiv) {
            // 既存のメッセージをクリア
            messagesDiv.innerHTML = '';
            
            // 挨拶メッセージを追加
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message ai-message';
            messageDiv.innerHTML = `
                <div class="message-content">
                    <strong>${this.currentCharacter.name}:</strong><br>
                    ${this.currentCharacter.greeting.replace(/\n/g, '<br>')}
                </div>
            `;
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
    }

    // 現在のキャラクター取得
    getCurrentCharacter() {
        return this.currentCharacter;
    }

    // 全キャラクター取得
    getAllCharacters() {
        return this.characters;
    }

    // キャラクター選択UIを表示
    showCharacterSelector() {
        const existingModal = document.querySelector('.character-modal');
        if (existingModal) {
            existingModal.remove();
        }

        const modal = document.createElement('div');
        modal.className = 'character-modal';
        modal.innerHTML = this.createCharacterSelector();
        document.body.appendChild(modal);

        // モーダル外クリックで閉じる
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }

    // キャラクター選択UIを生成
    createCharacterSelector() {
        const characters = this.getAllCharacters();
        const currentId = this.currentCharacter?.id;

        let html = `
            <div class="character-selector">
                <h3>キャラクター選択</h3>
                <div class="character-grid">
        `;

        Object.values(characters).forEach(character => {
            const isActive = character.id === currentId ? 'active' : '';
            html += `
                <div class="character-card ${isActive}" onclick="characterManager.selectCharacter('${character.id}'); document.querySelector('.character-modal').remove();">
                    <div class="character-avatar" style="background-color: ${character.color}">
                        <img src="${character.image}" alt="${character.name}" 
                             onerror="this.style.display='none'; this.parentElement.innerHTML='${character.emoji}';">
                    </div>
                    <div class="character-info">
                        <div class="character-name-small">${character.name}</div>
                        <div class="character-desc-small">${character.description}</div>
                    </div>
                </div>
            `;
        });

        html += `
                </div>
                <button onclick="document.querySelector('.character-modal').remove();" class="close-btn">閉じる</button>
            </div>
        `;

        return html;
    }
}

// グローバルインスタンス作成
const characterManager = new CharacterManager();

// DOMが読み込まれた後にキャラクター変更ボタンのイベント設定
document.addEventListener('DOMContentLoaded', function() {
    const changeCharacterBtn = document.getElementById('change-character-btn');
    if (changeCharacterBtn) {
        changeCharacterBtn.addEventListener('click', () => {
            characterManager.showCharacterSelector();
        });
    }
});

// === 確実なイベント設定（修正版） ===
// 既存のcharacter-manager.jsの最後に確実なイベント設定を追加

// ページ読み込み完了後にイベントを設定（複数の方法で確実に）
function setupCharacterChangeButton() {
    const changeBtn = document.getElementById('change-character-btn');
    if (changeBtn) {
        console.log('✅ キャラクター変更ボタン発見:', changeBtn);
        
        // 既存のイベントリスナーを削除
        changeBtn.removeEventListener('click', handleCharacterChange);
        
        // 新しいイベントリスナーを追加
        changeBtn.addEventListener('click', handleCharacterChange);
        
        // onclick属性も設定（フォールバック）
        changeBtn.onclick = handleCharacterChange;
        
        console.log('✅ キャラクター変更ボタンのイベント設定完了');
        return true;
    } else {
        console.error('❌ キャラクター変更ボタンが見つかりません');
        return false;
    }
}

// ボタンクリック時の処理
function handleCharacterChange(event) {
    event.preventDefault();
    console.log('🎯 キャラクター変更ボタンがクリックされました');
    
    if (window.characterManager) {
        characterManager.showCharacterSelector();
    } else {
        console.error('❌ characterManagerが見つかりません');
    }
}

// 複数のタイミングでイベント設定を試行
document.addEventListener('DOMContentLoaded', setupCharacterChangeButton);
window.addEventListener('load', setupCharacterChangeButton);

// 3秒後にも再試行（フォールバック）
setTimeout(() => {
    if (!setupCharacterChangeButton()) {
        console.log('🔄 3秒後の再試行でもボタンが見つかりませんでした');
    }
}, 3000);

// === 簡単なイベント設定（緊急修正版） ===
setTimeout(() => {
    const btn = document.getElementById('change-character-btn');
    if (btn) {
        console.log('✅ ボタン発見！イベント設定中...');
        btn.onclick = function() {
            console.log('🎯 ボタンクリック！');
            if (window.characterManager) {
                characterManager.showCharacterSelector();
            }
        };
        console.log('✅ イベント設定完了');
    } else {
        console.log('❌ ボタンが見つかりません');
    }
}, 1000);
